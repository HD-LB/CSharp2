//http://my.telerikacademy.com/courses/Courses/Details/219

//http://bgcoder.com/Contests/95/CSharp-Part-2-2013-2014-14-Sept-2013-Evening


//So… You are given N letters.Write a program that finds the count of all words with no two consecutive equal characters that can be generated by reordering the given letters.The generated words should contain all given letters. If the given word meets the requirements it should also be considered in the count.
//Input
//The input data should be read from the console.
//On the first input line there will be the number N – the count of the letters you should use.
//On each of the next N lines, there will be a single character.
//The input data will always be valid and in the format described.There is no need to check it explicitly.
//Output
//The output data should be printed on the console.
//On the only output line write the count of the words found.
//Constraints
//•	N will be between 1 and 10, inclusive.All given letters will be small Latin letters (‘a’ – ‘z’)
//•	Allowed working time for your program: 0.35 seconds.Allowed memory: 32 MB.

//Example input      Example output        Explanation
//4
//a
//b
//a
//a                       0	               It is impossible to construct a word with these letters.

//7
//i
//i
//x
//x
//x
//i
//i                        1	               The only possible word is “ixixixi”.

//Examples
//Example input         Example output              Explanation
//2
//b
//a	                     2	                        Two possible words: “ab” and “ba”


//10
//j
//i
//h
//g
//f
//e
//d
//c
//b
//a	                        3628800	               There are 3628800 possible words.






namespace _10.TheyAreGreen
{
   using System;
   using System.Collections.Generic;


   class TheyAreGreen
   {
      static void Main()
      {
         int N = int.Parse(Console.ReadLine());

         char[] letters = new char[N];

         for (int i = 0; i < N; i++)
         {
            letters[i] = char.Parse(Console.ReadLine());
         }

        
         Array.Sort(letters);

         int count = 0;

         do
         {
            if (IsMatch(letters))
            {
               count++;
            }

         } while (NexPermutation(letters));
         Console.WriteLine(count);
      }

      private static bool NexPermutation(char[] array)
      {
         for (int index = array.Length - 2; index >= 0; index--)
         {
            if (array[index] < array[index + 1])
            {
               int swapWithIndex = array.Length - 1;
               while (array[index] >= array[swapWithIndex])
               {
                  swapWithIndex--;
               }

               //Swap the i=th and the j-th elements
               var temp = array[index];
               array[index] = array[swapWithIndex];
               array[swapWithIndex] = temp;

               Array.Reverse(array, index + 1, array.Length - index - 1);
               return true;
            }
         }
         //No more permutaions
         return false;
      }



      public static bool IsMatch(char[] word)
      {
         for (int i = 1; i < word.Length; i++)
         {
            if (word[i] == word[i - 1])
            {
               return false;
            }
         }
         return true;
      }
   }
}
