//http://bgcoder.com/Contests/94/CSharp-Part-2-2013-2014-14-Sept-2013-Morning

//http://my.telerikacademy.com/courses/Courses/Details/219


//You are given few letters.Write a program that finds the number of all words with no two consecutive equal character that can be generated by reordering the given letters.The generated words should contain all given letters. If the given word meets the requirements it should also be considered in the count.
//Input
//The input data should be read from the console.
//On the only input line there will be a single word containing all the letters that you should use for generating the words.
//The input data will always be valid and in the format described.There is no need to check it explicitly.
//Output
//The output data should be printed on the console.
//On the only output line write the number of words found.
//Constraints
//•	The number of the given letters will be between 1 and 10, inclusive.
//•	All given letters will be small Latin letters (‘a’ – ‘z’)
//•	Allowed working time for your program: 0.35 seconds.Allowed memory: 32 MB.
//Examples
//Example input            Example output             Explanation
//xy	                        2                    	Two possible words: “xy” and “yx”
//xxxy	                     0                    	It is impossible to construct a word with these letters.
//aahhhaa                     1                    	The only possible word is “ahahaha”.
//nopqrstuvw               3628800	                  There are 3628800 possible words.


namespace _05.FeaturingWithGrisko
{

   using System;
   using System.Linq;

   class FeaturingWithGrisko
   {
      static void Main()
      {
         var input = Console.ReadLine();
         var inputAsCharArray = input.ToCharArray();
         Array.Sort(inputAsCharArray);
         int count = 0;
         do
         {
            if (IsMatch(inputAsCharArray))
            {
               count++;
            }

         } while (NexPermutation(inputAsCharArray));
         Console.WriteLine(count);
      }

      private static bool NexPermutation(char[] array)
      {
         for (int index = array.Length - 2; index >= 0; index--)
         {
            if (array[index] < array[index + 1])
            {
               int swapWithIndex = array.Length - 1;
               while (array[index] >= array[swapWithIndex])
               {
                  swapWithIndex--;
               }

               //Swap the i=th and the j-th elements
               var temp = array[index];
               array[index] = array[swapWithIndex];
               array[swapWithIndex] = temp;

               Array.Reverse(array, index + 1, array.Length - index - 1);
               return true;
            }
         }
         //No more permutaions
         return false;
      }



      public static bool IsMatch(char[] word)
      {
         for (int i = 1; i < word.Length; i++)
         {
            if (word[i] == word[i - 1])
            {
               return false;
            }
         }
         return true;
      }
   }
}
